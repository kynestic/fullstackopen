### **HOW TO CREATE REACT PROJECT WITH VITE**

`npm create vite@latest [folder_name] -- --template react
cd [path of folder_name]
npm install
npm run dev`

### **INSTALL AXIOS FOR CREATING REST APT REQUEST TO SERVER**

`npm install axios`

### **INSTALL JSON-SERVER FOR TEMPORARY DEVELOPMENT**

`npm install json-server --save-dev`

added in scripts: `"server": "json-server -p3001 --watch [file_name]"`
`json-server --port 3001 --watch db.json == npm run server` 

### **CREATE A SERVER WITH PURE NODE.JS**

```jsx
const http = require('http')
const app = http.createServer((request, response) => {
response.writeHead(200, { 'Content-Type': 'text/plain' }) **//Define response header and response type**
response.end('Hello World') **//Write the body and end the body**
})
const PORT = 3001
app.listen(PORT)
console.log(Server running on port ${PORT})
=>node [js-file_name]
```

### **CREATE A SERVER WITH EXPRESS.JS**

```jsx
npm install express
const express = require('express')
const app = express()
app.use(express.json()) **//Using json-parser to automatically recognize json data in body of request**
let notes = [
...
]
app.get('/', (request, response) => {
//We can use res.type('[type]'); to set the response type (default is text/html)
response.send('<h1>Hello World!</h1>') **//Express automatically set the Content-Type to text/html**
})
app.get('/api/notes', (request, response) => {
response.json(notes)  **// Use json method will send the notes object as a json**
//  formatted string and the default Content-Type in this case is application/json
//In Nodejs we have to write this: response.end(JSON.stringify(notes))
})
app.get('/api/notes/:id', (request, response) => {
const id = [request.params.id](http://request.params.id/) **//We can access the id in the adress by params object in request**
const note = notes.find(note => [note.id](http://note.id/) === id)
	response.json(note)
})
const generateId = () => {
const maxId = notes.length > 0
	? Math.max(...notes.map(n => Number([n.id](http://n.id/))))
	: 0
return String(maxId + 1)
}
app.post('/api/notes', (request, response) => {
const body = request.body
if (!body.content) {
return response.status(400).json({
error: 'content missing'
})
}

const note = {
content: body.content,
important: Boolean(body.important) || false,
id: generateId(),
}

notes = notes.concat(note)

response.json(note)
})
const PORT = 3001
app.listen(PORT, () => {
console.log(`Server running on port ${PORT}`)
})
```

### **NODEMON FOR CONTINOUSLY TESTING WITH EXPRESSJS AND NODEJS**

`npm install --save-dev nodemon`

Add this in script

```jsx
"start": "node index.js",
"dev": "nodemon index.js",
```

Then use this command line in terminal to run the server

`npm run dev`

### **MORGAN FOR LOGGING REQUEST AND RESPONSE**

```jsx
morgan.token('body', (req) =>{//used for create new token beside default token
return req.method === 'POST'? JSON.stringify(req.body): ''
})
app.use(morgan(':method :url :status :res[content-size] :response-time ms :body')) //use a personal format,
you can use tiny or function etc
```

### **ABOUT EXPRESS.JSON() AND EXPRESS.URENCODED(), MIDDLEWARE EXPLAINATION**

https://stackoverflow.com/questions/23259168/what-are-express-json-and-express-urlencoded

### **THE VISUAL STUDIO CODE REST CLIENT**

If you use Visual Studio Code, you can use the VS Code REST client plugin instead of Postman. Once the plugin is installed, using it is very simple. We make a directory at the root of the application named requests. We save all the REST client requests in the directory as files that end with the .rest extension.

### ENVIROMENT VARIABLES

### **CORS: CROSS-ORIGIN-RESOURCE-SHARING**

URL's origin is defined by the combination of **protocol** (AKA scheme), **hostname**, and **port.**
For example:
[http://example.com:80/index.html](http://example.com/index.html)
protocol: http
host: [example.com](http://example.com/)
port: 80

**According to W3C:**

Cross-origin resource sharing (CORS) is a mechanism that allows restricted resources (e.g. fonts) on a web page to be requested from another domain outside the domain from which the first resource was served. We can allow requests from other origins by using Node's `cors` middleware. In your backend repository, install `cors` with the command:

`npm install corscopy`

Take the middleware to use and allow for requests from all origins:

```jsx
const cors = require('cors')
app.use(cors())
```

### FRONTEND PRODUCTION BUILD

`npm run build` 

/**/This creates a directory called** `dist` **which contains the only HTML file of our application** `index.html` **and the directory** `assets`**.**

What is a production build? It is  [Minified](https://en.wikipedia.org/wiki/Minification_(programming)) version of our application's JavaScript code, all of the code from all of the application's dependencies will also be minified into this single javascript file.

The minified code is not very readable. The beginning of the code looks like this:

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/6cfad7e6-9b16-4c6f-84a4-f172d3eeded5/3b2203a7-0d70-4337-ac30-af1c58213e5d/Untitled.png)

After creating the production build, we copy the directory `dist` to the backend directory, the application can now be used from the *backend* address [http://localhost:3001](http://localhost:3001/):

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/6cfad7e6-9b16-4c6f-84a4-f172d3eeded5/ea34a8d6-6efc-40a4-8e78-21e34163f573/Untitled.png)

The setup that is ready for a product deployment looks as follows:

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/6cfad7e6-9b16-4c6f-84a4-f172d3eeded5/2d6eca12-57a7-4304-8a56-b48d807dda4a/Untitled.png)

Unlike when running the app in a development environment, everything is now in the same node/express-backend that runs in localhost:3001. 

When the browser goes to the page, the file *index.html* is rendered, causes the browser to fetch the production version of the React app. Once it starts to run, it fetches the json-data from the address localhost:3001/api/notes.

### **SERVING STATIC FILES FROM THE BACKEND**

We begin by copying the production build of the frontend to the root of the backend.

To make Express show *static content*, the page *index.html* and the JavaScript, etc., it fetches, we need a built-in middleware from Express called [static](http://expressjs.com/en/starter/static-files.html).

When we add the following amidst the declarations of middlewares:

```jsx
app.use(express.static('dist'))
```

whenever Express gets an HTTP GET request it will first check if the `dist` directory contains a file corresponding to the request's address. If a correct file is found, Express will return it.

### PROXY

Changes on the frontend have caused it to no longer work in development mode (when started with command *npm run dev*), as the connection to the backend does not work.

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/6cfad7e6-9b16-4c6f-84a4-f172d3eeded5/886172e6-99d1-4b19-ad1f-c4f60fdb2174/Untitled.png)

This is due to changing the backend address to a relative URL:

```jsx
const baseUrl = '/api/notes'
```

It is enough to add the following declaration to the *vite.config.js* file of the frontend repository.

```bash
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
  **server: {    
	  proxy: {      
		  '/api': {
			  target: 'http://localhost:3001',        
			  changeOrigin: true,      
			 },    
		}  
	},**
})
```

### ERROR LOG WHEN NOT CONFIGURING PROXY THE RIGHT WAY (IN THIS CASE I FORGOT TO ADD SERVER IN VITE.CONFIG.JS)

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/6cfad7e6-9b16-4c6f-84a4-f172d3eeded5/2043a81e-b404-43a5-955d-6cd297de03de/Untitled.png)

### CODE FOR ETABLISH CONNECTION AND ADD A SAMPLE TO MONGODB

```jsx
**const mongoose = require('mongoose')**

if (process.argv.length<3) {
  console.log('give password as argument')
  process.exit(1)
}

const password = process.argv[2]

const url =
  `mongodb+srv://fullstack:${password}@cluster0.o1opl.mongodb.net/?retryWrites=true&w=majority`

**mongoose.set('strictQuery',false)

mongoose.connect(url)**

const noteSchema = new mongoose.Schema({
  content: String,
  important: Boolean,
})

const Note = mongoose.model('Note', noteSchema)

const note = new Note({
  content: 'HTML is easy',
  important: true,
})

note.save().then(result => {
  console.log('note saved!')
  **mongoose.connection.close()**
})
```

### NODEJS PROCESS.ARGV

`process.argv` is a property that holds an array of command-line values provided when the current process was initiated. The first element in the array is the absolute path to the Node, followed by the path to the file that’s running and finally any command-line arguments provided when the process was initiated.

Do a quick `console.log(process.argv)` and you'll immediately spot the thing.

It starts on 2 because `process.argv` contains the whole command-line invocation:

```jsx
process.argv = ['node', 'yourscript.js', ...]

```

Elements `0` and `1` are not "arguments" from the script's point of view, but they are for the shell that invoked the script.

In the previous code, we used this line of code:

```jsx
const password = process.argv[2]
```

We can access the command line parameter, for example: our command line will be `node mongo.js yourpassword`

Then when we log the `process.argv[2]` to the screen, it will be the `yourpassword` parameter from the command line

### CHANGE THE LOCATION

Let's destroy the default database `test` and change the name of the database referenced in our connection string to `noteApp` instead, by modifying the URI:

```
const url =
  `mongodb+srv://fullstack:${password}@cluster0.o1opl.mongodb.net/**noteApp**?retryWrites=true&w=majority`
```

### SCHEMA

According to MongoDB official site: A `schema` is **a JSON object that defines the structure and contents of your data**. 

[`Models`](https://mongoosejs.com/docs/api/model.html) are fancy constructors compiled from `Schema` definitions. An instance of a model is called a [`document`](https://mongoosejs.com/docs/documents.html). `Models` are responsible for creating and reading documents from the underlying MongoDB database.

For example, in the previous code, we create a new `schema` name `noteSchema` with 2 field are `content` and `important`

```jsx
const noteSchema = new mongoose.Schema({
  content: String,
  important: Boolean,
})
```

After that, we use `model` method to create a new constructor

```jsx
const Note = mongoose.model('Note', noteSchema)

```

### **CREATING AND SAVING OBJECTS**

Next, the application creates a new note object with the help of the *Note* [model](http://mongoosejs.com/docs/models.html):

```jsx
const note = new Note({
  content: 'HTML is Easy',
  important: false,
})
```

Models are *constructor functions* that create new JavaScript objects based on the provided parameters. 

Since the objects are created with the model's constructor function, they have all the properties of the model, which include methods for saving the object to the database.

Saving the object to the database happens with the appropriately named `*save*`method, which can be provided with an event handler with the `*then*` method:

```
note.save().then(result => {
  console.log('note saved!')
  mongoose.connection.close()
})
```

When the object is saved to the database, the event handler provided to `*then*` gets called. 

The event handler closes the database connection with the command `mongoose.connection.close()`.

### FETCHING OBJECTS FROM THE DATABASE

Let's comment out the code for generating new notes and replace it with the following:

```jsx
Note.find({}).then(result => {
  result.forEach(note => {
    console.log(note)
  })
  **mongoose.connection.close()**
})
```

When the code is executed, the program prints all the notes stored in the database

![image.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/6cfad7e6-9b16-4c6f-84a4-f172d3eeded5/24928657-8800-47e1-829b-cb0ffc197a73/image.png)

The objects are retrieved from the database with the [find](https://mongoosejs.com/docs/api/model.html#model_Model-find) method of the *Note* model. The parameter of the method is an object expressing search conditions. Since the parameter is an empty object`{}`, we get all of the notes stored in the *notes* collection.

The search conditions adhere to the Mongo search query [syntax](https://docs.mongodb.com/manual/reference/operator/).

We could restrict our search to only include important notes like this:

```jsx
Note.find({ important: true }).then(result => {
  // ...
})
```

### CONNECTING THE BACKEND TO A DATABASE

Let's get a quick start by copy-pasting the Mongoose definitions to the *index.js* file:

```jsx
const mongoose = require('mongoose')

const password = process.argv[2]

// DO NOT SAVE YOUR PASSWORD TO GITHUB!!
const url =
  `mongodb+srv://fullstack:${password}@cluster0.o1opl.mongodb.net/?retryWrites=true&w=majority`

mongoose.set('strictQuery',false)
mongoose.connect(url)

const noteSchema = new mongoose.Schema({
  content: String,
  important: Boolean,
})

const Note = mongoose.model('Note', noteSchema)
```

To avoid authentication issue due to the password variable in index.js, we install `dotenv` by running `npm install dotenv` then create a new file name. env to store our URI:

```jsx
MONGODB_URI="mongodb+srv://fullstack:password@db.gwcmebp.mongodb.net/?retryWrites=true&w=majority&appName=db"
```

Once the `.env` file is ready, remember to add it to your `.gitignore` file to prevent pushing the password to Git:

```
/node_modules
**.env**
```

Then, in your `index.js` file, make the necessary changes with the following line so that your code can access the URL in your `.env` file:

```jsx
const url = process.env.MONGODB_URI;
```

The application works almost perfectly. The frontend assumes that every object has a unique id in the `id` field. We also don't want to return the mongo versioning field `*__v*` to the frontend.

One way to format the objects returned by Mongoose is to [modify](https://stackoverflow.com/questions/7034848/mongodb-output-id-instead-of-id) the `toJSON` method of the schema, which is used on all instances of the models produced with that schema.

To modify the method we need to change the configurable options of the schema, options can be changed using the set method of the schema, see here for more info on this method: https://mongoosejs.com/docs/guide.html#options. See https://mongoosejs.com/docs/guide.html#toJSON and https://mongoosejs.com/docs/api.html#document_Document-toObject for more info on the `toJSON` option.

see https://mongoosejs.com/docs/api/document.html#transform for more info on the *transform* function.

```jsx
noteSchema.set('toJSON', {
  transform: (document, returnedObject) => {
    returnedObject.id = returnedObject._id.toString()
    delete returnedObject._id
    delete returnedObject.__v
  }
})
```

**Even though the *_id* property of Mongoose objects looks like a string, it is in fact an object.** The `toJSON` method we defined transforms it into a string just to be safe. If we didn't make this change, it would cause more harm to us in the future once we start writing tests.

No changes are needed in the handler.

The code automatically uses the defined `toJSON` when formatting notes to the response.

### **MOVING DB CONFIGURATION TO ITS OWN MODULE**

Before we refactor the rest of the backend to use the database, let's extract the Mongoose-specific code into its own module.

Let's create a new directory for the module called `models`, and add a file called `note.js`:

```jsx
const mongoose = require('mongoose')

mongoose.set('strictQuery', false)

*const url = process.env.MONGODB_URI

console.log('connecting to', url)*

*mongoose.connect(url)
	.then(result => {
		console.log('connected to MongoDB')
	}) 
	.catch(error => {
		console.log('error connecting to MongoDB:', error.message)  
	})*

const noteSchema = new mongoose.Schema({
  content: String,
  important: Boolean,
})

noteSchema.set('toJSON', {
  transform: (document, returnedObject) => {
    returnedObject.id = returnedObject._id.toString()
    delete returnedObject._id
    delete returnedObject.__v
  }
})

*module.exports = mongoose.model('Note', noteSchema)*
```

Importing the module happens by adding the following line to *index.js*:

```jsx
const Note = require('./models/note')
```

### **ERROR HANDLING**

When we try to visit the URL of a note with an id that does not exist e.g. http://localhost:3001/api/notes/5c41c90e84d891c15dfa3431 where *5c41c90e84d891c15dfa3431* is not an id stored in the database, the response will be `null`

We can change this behavior so that if a note with given id doesn’t exist, the server will response to the request with the *HTTP status code 404*

In addition, let’s implement a simple catch block to handle cases where the promise returned by the `findById` is rejected

```jsx
app.get('/api/notes/:id', (request, response) => {
  Note.findById(request.params.id)
			.then(note => {
	      if (note) {
		      response.json(note)      
		    } 
		    else{        r
			    esponse.status(404).end()      
			   }    
			})
			.catch(error => {
		    console.log(error)      
		    response.status(500).end()    
		  })
})
```

If no matching object is found, the value of note will be null and the else block get to be executed. This results in a response with status code *404 not found*.

If a promise returned by the `findById` method is rejected, the response will have the status code *500 internal server error*

On top of the non-existing note situation, there’s one more case that needs to be handled. In this case, when we are trying to fetch a note with wrong kind of `id` (doesn’t match the Mongo identifier format). We can get some kind of error message shown below:

```
Method: GET
Path:   /api/notes/someInvalidId
Body:   {}
---
{ CastError: Cast to ObjectId failed for value "someInvalidId" at path "_id"
    at CastError (/Users/mluukkai/opetus/_fullstack/osa3-muisiinpanot/node_modules/mongoose/lib/error/cast.js:27:11)
    at ObjectId.cast (/Users/mluukkai/opetus/_fullstack/osa3-muisiinpanot/node_modules/mongoose/lib/schema/objectid.js:158:13)
    ...
```

Given a malformed id as an argument, the `findById` method will throw an error causing the returned promise to be rejected. This will cause the callback function defined in the `catch` block to be called.

Let's make some small adjustments to the response in the `catch` block:

```jsx
app.get('/api/notes/:id', (request, response) => {
  Note.findById(request.params.id)
    .then(note => {
      if (note) {
        response.json(note)
      } else {
        response.status(404).end()
      }
    })
    .catch(error => {
      console.log(error)
      response.status(400).send({ error: 'malformatted id' })    })
})
```

The appropriate status code for the situation is [400 Bad Request](https://www.rfc-editor.org/rfc/rfc9110.html#name-400-bad-request) because the situation fits the description perfectly:

> *The 400 (Bad Request) status code indicates that the server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).*
> 

### MOVING ERROR HANDLING INTO MIDDLEWARE

We have written the code for the error handler among the rest of our code. This can be a reasonable solution at times, but there are cases where it is better to implement all error handling in a single place.

Let's change the handler for the `*/api/notes/:id*` route so that it passes the error forward with the *next* function. The next function is passed to the handler as the third parameter:

```jsx
app.get('/api/notes/:id', (request, response, next) => {  Note.findById(request.params.id)
    .then(note => {
      if (note) {
        response.json(note)
      } else {
        response.status(404).end()
      }
    })
    .catch(error => next(error))})
```

If `next` was called without an argument, the execution would simply move onto the next route or middleware.

If `next` was called with an argument, then the execution will continue to the *error handler middleware*

Express [error handlers](https://expressjs.com/en/guide/error-handling.html) are middleware that are defined with a function that accepts four parameters. Our error handlers for the previous version looks like this:

```jsx
const errorHandler = (error, request, response, next) => {
  console.error(error.message)

  if (error.name === 'CastError') {
    return response.status(400).send({ error: 'malformatted id' })
  }

  next(error)
}

// this has to be the last loaded middleware, also all the routes should be registered before this!
app.use(errorHandler)
```

The error handler checks if the error is a *CastError* exception, in which case we know that the error was caused by an invalid object id for Mongo. In this situation, the error handler will send a response to the browser with the response object passed as a parameter. In all other error situations, the middleware passes the error forward to the default Express error handler.
Note that the error-handling middleware has to be the last loaded middleware, also all the routes should be registered before the error-handler!

### THE ORDER OF MIDDLEWARE LOADING

**Middleware trong JavaScript**

Trong JavaScript, **middleware** là các hàm nằm giữa yêu cầu (request) của người dùng và phản hồi (response) mà máy chủ gửi về. Nó được sử dụng phổ biến trong các framework như **Express.js** để xử lý các yêu cầu HTTP, thực hiện xác thực, kiểm tra quyền truy cập, xử lý dữ liệu trước khi nó tới các endpoint cụ thể.

**Middleware là gì?**

Middleware là các hàm có quyền truy cập vào:

- **Request object** (`req`): Đại diện cho thông tin về yêu cầu HTTP (người dùng gửi lên).
- **Response object** (`res`): Đại diện cho thông tin phản hồi HTTP (máy chủ gửi về).
- **Next function** (`next`): Được gọi để chuyển quyền điều khiển cho middleware tiếp theo trong chuỗi.

Một middleware có dạng như sau:

```jsx
function middleware(req, res, next) {
  // Thực hiện một số tác vụ
  next(); // Chuyển sang middleware tiếp theo
}
```

**Phân loại Middleware**

1. **Application-level middleware**: Áp dụng cho toàn bộ ứng dụng. Các hàm này được gọi mỗi khi có một yêu cầu HTTP tới ứng dụng.
    
    ```jsx
    app.use((req, res, next) => {
      console.log('Middleware được gọi cho mọi yêu cầu');
      next(); // Tiếp tục gọi middleware tiếp theo hoặc route
    })
    ```
    
2. **Router-level middleware**: Chỉ áp dụng cho các tuyến đường (route) cụ thể. Điều này giúp middleware chỉ chạy khi một yêu cầu khớp với route mà nó áp dụng.
    
    ```jsx
    const router = express.Router();
    
    router.use('/user', (req, res, next) => {
      console.log('Middleware chỉ áp dụng cho route /user');
      next();
    });
    
    app.use(router)
    ```
    
3. **Error-handling middleware**: Loại middleware đặc biệt xử lý lỗi. Các middleware này có một chữ ký hàm khác, với bốn tham số: `(err, req, res, next)`.
    
    ```jsx
    app.use((err, req, res, next) => {
      console.error(err.stack);
      res.status(500).send('Có lỗi xảy ra!');
    });
    ```
    
4. **Built-in middleware**: Express.js cung cấp các middleware sẵn có như:
    - `express.static`: Phục vụ các file tĩnh.
    - `express.json`: Phân tích dữ liệu JSON từ request body.
5. **Third-party middleware**: Các middleware từ các thư viện bên ngoài như `body-parser`, `morgan`, hoặc `cookie-parser`.

***Cách thức gọi Middleware***

Middleware có thể được áp dụng bằng các phương thức sau:

1. **`app.use()`**: Sử dụng để định nghĩa middleware áp dụng cho mọi yêu cầu. Bạn có thể chỉ định middleware áp dụng cho một đường dẫn cụ thể.
    
    ```jsx
    app.use((req, res, next) => {
      console.log('Middleware 1');
      next();
    });
    
    app.use((req, res, next) => {
      console.log('Middleware 2');
      next();
    })
    ```
    
2. **`app.get()`, `app.post()`, ...**: Middleware cũng có thể được thêm trực tiếp vào route cụ thể, trước khi gọi tới hàm xử lý chính của route.
    
    ```jsx
    app.get('/user', (req, res, next) => {
      console.log('Middleware cho route /user');
      next(); // Tiếp tục tới hàm xử lý chính
    }, (req, res) => {
      res.send('Trang người dùng');
    })
    ```
    
3. **Router-level middleware**: Middleware chỉ áp dụng cho router cụ thể.
    
    ```jsx
    const router = express.Router();
    
    router.use((req, res, next) => {
      console.log('Middleware cho các yêu cầu trong router');
      next();
    });
    
    app.use('/api', router); // Áp dụng cho các route bắt đầu với /api
    ```
    

**Thứ tự gọi Middleware**

Thứ tự mà các middleware được định nghĩa trong mã ảnh hưởng trực tiếp đến cách xử lý của chúng. Khi một yêu cầu HTTP đến, các middleware sẽ được thực hiện theo thứ tự mà chúng được khai báo. Khi một middleware hoàn thành, nó sẽ gọi `next()` để chuyển quyền điều khiển cho middleware tiếp theo.

Ví dụ:

```jsx
app.use((req, res, next) => {
  console.log('Middleware 1');
  next();
});

app.use((req, res, next) => {
  console.log('Middleware 2');
  next();
});

app.get('/', (req, res) => {
  res.send('Trang chủ');
});
```

Khi người dùng truy cập route `/`, thứ tự thực hiện sẽ như sau:

1. Middleware 1: In ra `'Middleware 1'`.
2. Middleware 2: In ra `'Middleware 2'`.
3. Route handler: Gửi phản hồi `'Trang chủ'`.

Nếu một middleware không gọi `next()`, chuỗi xử lý sẽ dừng lại, và các middleware hoặc route tiếp theo sẽ không được thực hiện.

Ví dụ:

```jsx
app.use((req, res, next) => {
  console.log('Middleware 1');
  // Không gọi next() nên chuỗi dừng lại ở đây
});

app.use((req, res, next) => {
  console.log('Middleware 2'); // Sẽ không được thực hiện
  next();
});
```

**Kiểm soát luồng trong Middleware**

- **Dừng chuỗi middleware**: Nếu không gọi `next()` hoặc gửi phản hồi bằng `res.send()`, chuỗi sẽ dừng lại.
    
    ```jsx
    app.use((req, res, next) => {
      res.send('Dừng chuỗi middleware tại đây');
      // next() không được gọi nên middleware tiếp theo không chạy
    });
    ```
    
- **Truyền lỗi sang middleware xử lý lỗi**: Nếu một lỗi xảy ra, bạn có thể truyền lỗi tới middleware xử lý lỗi bằng cách gọi `next(err)`.
    
    ```jsx
    app.use((req, res, next) => {
      const error = new Error('Có lỗi xảy ra');
      next(error); // Chuyển lỗi tới middleware xử lý lỗi
    });
    
    app.use((err, req, res, next) => {
      res.status(500).send('Lỗi: ' + err.message);
    });
    ```
    

**Tổng kết**

- **Middleware** là các hàm xử lý trung gian trong quá trình xử lý yêu cầu và trả về phản hồi.
- Các middleware được thực thi theo thứ tự mà chúng được định nghĩa, và mỗi middleware cần gọi `next()` để tiếp tục chuỗi.
- **Thứ tự định nghĩa** rất quan trọng vì middleware đầu tiên được gọi đầu tiên. Nếu một middleware không gọi `next()`, chuỗi sẽ dừng lại và các middleware tiếp theo sẽ không được thực hiện.

### OTHER OPERATIONS

Let's add some missing functionality to our application, including deleting and updating an individual note.

The easiest way to delete a note from the database is with the [findByIdAndDelete](https://mongoosejs.com/docs/api/model.html#Model.findByIdAndDelete()) method:

```jsx
app.delete('/api/notes/:id', (request, response, next) => {
  Note.findByIdAndDelete(request.params.id)
    .then(result => {
      response.status(204).end()
    })
    .catch(error => next(error))
})
```

In both of the "successful" cases of deleting a resource, the backend responds with the status code *204 no content*. The two different cases are deleting a note that exists, and deleting a note that does not exist in the database. 

The *result* callback parameter could be used for checking if a resource was actually deleted, and we could use that information for returning different status codes for the two cases if we deem it necessary. 

Any exception that occurs is passed onto the error handler.

The toggling of the importance of a note can be easily accomplished with the [findByIdAndUpdate](https://mongoosejs.com/docs/api/model.html#model_Model-findByIdAndUpdate) method.

```jsx
app.put('/api/notes/:id', (request, response, next) => {
  const body = request.body

  const note = {
    content: body.content,
    important: body.important,
  }

  Note.findByIdAndUpdate(request.params.id, note, { new: true })
    .then(updatedNote => {
      response.json(updatedNote)
    })
    .catch(error => next(error))
})
```

Notice that the `findByIdAndUpdate` method **receives a regular JavaScript object as its argument**, and not a new note object created with the `Note` constructor function.

By default, the `updatedNote` parameter of the event handler receives the original document [without the modifications](https://mongoosejs.com/docs/api/model.html#model_Model-findByIdAndUpdate). 

We added the optional `{ new: true }` parameter, which will cause our event handler to be called with the new modified document instead of the original.